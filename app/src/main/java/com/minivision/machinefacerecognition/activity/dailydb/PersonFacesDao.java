package com.minivision.machinefacerecognition.activity.dailydb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.minivision.machinefacerecognition.activity.entity.PersonFaces;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PERSON_FACES".
*/
public class PersonFacesDao extends AbstractDao<PersonFaces, Long> {

    public static final String TABLENAME = "PERSON_FACES";

    /**
     * Properties of entity PersonFaces.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Num = new Property(2, String.class, "num", false, "NUM");
        public final static Property PhoneNum = new Property(3, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property ShowPicPath = new Property(5, String.class, "showPicPath", false, "SHOW_PIC_PATH");
        public final static Property PicPath = new Property(6, String.class, "picPath", false, "PIC_PATH");
        public final static Property Sex = new Property(7, String.class, "sex", false, "SEX");
        public final static Property Work = new Property(8, String.class, "work", false, "WORK");
        public final static Property LimtStarttime = new Property(9, String.class, "limtStarttime", false, "LIMT_STARTTIME");
        public final static Property LimtEndtime = new Property(10, String.class, "limtEndtime", false, "LIMT_ENDTIME");
    }


    public PersonFacesDao(DaoConfig config) {
        super(config);
    }
    
    public PersonFacesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PERSON_FACES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _id
                "\"NAME\" TEXT," + // 1: name
                "\"NUM\" TEXT," + // 2: num
                "\"PHONE_NUM\" TEXT," + // 3: phoneNum
                "\"TIME\" TEXT," + // 4: time
                "\"SHOW_PIC_PATH\" TEXT," + // 5: showPicPath
                "\"PIC_PATH\" TEXT," + // 6: picPath
                "\"SEX\" TEXT," + // 7: sex
                "\"WORK\" TEXT," + // 8: work
                "\"LIMT_STARTTIME\" TEXT," + // 9: limtStarttime
                "\"LIMT_ENDTIME\" TEXT);"); // 10: limtEndtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PERSON_FACES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonFaces entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(3, num);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(4, phoneNum);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String showPicPath = entity.getShowPicPath();
        if (showPicPath != null) {
            stmt.bindString(6, showPicPath);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(7, picPath);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String work = entity.getWork();
        if (work != null) {
            stmt.bindString(9, work);
        }
 
        String limtStarttime = entity.getLimtStarttime();
        if (limtStarttime != null) {
            stmt.bindString(10, limtStarttime);
        }
 
        String limtEndtime = entity.getLimtEndtime();
        if (limtEndtime != null) {
            stmt.bindString(11, limtEndtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonFaces entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(3, num);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(4, phoneNum);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String showPicPath = entity.getShowPicPath();
        if (showPicPath != null) {
            stmt.bindString(6, showPicPath);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(7, picPath);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(8, sex);
        }
 
        String work = entity.getWork();
        if (work != null) {
            stmt.bindString(9, work);
        }
 
        String limtStarttime = entity.getLimtStarttime();
        if (limtStarttime != null) {
            stmt.bindString(10, limtStarttime);
        }
 
        String limtEndtime = entity.getLimtEndtime();
        if (limtEndtime != null) {
            stmt.bindString(11, limtEndtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PersonFaces readEntity(Cursor cursor, int offset) {
        PersonFaces entity = new PersonFaces( //
            cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phoneNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // showPicPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // picPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // work
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // limtStarttime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // limtEndtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonFaces entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoneNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShowPicPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPicPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWork(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLimtStarttime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLimtEndtime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PersonFaces entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PersonFaces entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PersonFaces entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
